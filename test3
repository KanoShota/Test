// ピクチャーインピクチャーを閉じる
document.getElementById('closeBtn').addEventListener('click', async () => {
  if (document.pictureInPictureElement) {
    await document.exitPictureInPicture();
  }
  video.pause();
  video.remove();
});



// 必要な依存関係をインストール
sudo apt update
sudo apt install -y build-essential libssl-dev zlib1g-dev \
libncurses5-dev libncursesw5-dev libreadline-dev libsqlite3-dev \
libgdbm-dev libdb5.3-dev libbz2-dev libexpat1-dev liblzma-dev tk-dev \
libffi-dev wget curl git

// Python 3.13 をインストール
cd /usr/src
sudo wget https://www.python.org/ftp/python/3.13.0/Python-3.13.0.tgz
sudo tar xzf Python-3.13.0.tgz
cd Python-3.13.0
sudo ./configure --enable-optimizations --with-ensurepip=install
sudo make -j$(nproc)
sudo make altinstall

// バージョン確認
python3.13 --version
# => Python 3.13.0

python3.10 --version
# => Python 3.10.x

# レイヤーの作り方
mkdir ~/lambda_numpy_py312 && cd ~/lambda_numpy_py312
mkdir python
python3.12 -m venv venv
source venv/bin/activate
pip install --upgrade pip
pip install --only-binary=:all: --target=python numpy
find python -type d -name "__pycache__" -exec rm -rf {} +
find python -name "*.pyc" -delete
zip -r layer.zip python




from flask import Flask, request, jsonify
from werkzeug.middleware.proxy_fix import ProxyFix
app = Flask(__name__)
# LB を 1 段だけ通る前提。段数に合わせて x_* を調整
app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_port=1)
def detect_path(req):
    """
    入口の Host/Port/Proto を見て経路を判別
    """
    host = req.host              # 例) "app.example.com" / "ap-internal:9443"
    scheme = req.scheme          # 例) "https"
    url_root = req.url_root      # 例) "https://app.example.com/" / "https://ap-internal:9443/"
    # 判別ロジック（必要に応じて厳密化）
    if host == "app.example.com":
        return "lb", scheme, host, url_root
    if host == "ap-internal:9443" or host.startswith("ap-internal"):
        return "bastion", scheme, host, url_root
    # 予備：ポートで見る
    if host.endswith(":9443"):
        return "bastion", scheme, host, url_root
    return "unknown", scheme, host, url_root
@app.route("/whoami")
def whoami():
    kind, scheme, host, url_root = detect_path(request)
    return jsonify({
        "path": kind,               # "lb" / "bastion" / "unknown"
        "scheme": scheme,
        "host": host,
        "url_root": url_root,
        "full_url": request.url,
    })
