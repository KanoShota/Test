import os
import base64
from Crypto.Cipher import AES
from base64 import urlsafe_b64encode, urlsafe_b64decode

class AESCipher:
    def __init__(self, key_b64: str):
        """
        key_b64: Base64エンコードされた32バイトの文字列
        """
        self.key = base64.urlsafe_b64decode(key_b64)  # 32 bytes (AES-256)
        if len(self.key) not in (16, 24, 32):
            raise ValueError("AES key must be 16, 24, or 32 bytes")

    def pad(self, data: bytes, block_size: int = 16) -> bytes:
        pad_len = block_size - (len(data) % block_size)
        return data + bytes([pad_len] * pad_len)

    def unpad(self, data: bytes) -> bytes:
        pad_len = data[-1]
        return data[:-pad_len]

    def encrypt(self, plain_text: str) -> str:
        iv = os.urandom(16)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        padded = self.pad(plain_text.encode())
        encrypted = cipher.encrypt(padded)
        return urlsafe_b64encode(iv + encrypted).decode()

    def decrypt(self, encrypted_b64: str) -> str:
        raw = urlsafe_b64decode(encrypted_b64)
        iv = raw[:16]
        encrypted = raw[16:]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        decrypted = cipher.decrypt(encrypted)
        return self.unpad(decrypted).decode()
