sudo apt update
sudo apt install -y libreoffice libreoffice-calc libreoffice-common \
                    python3-venv
# 日本語表示用フォント（推奨）
sudo apt install -y fonts-noto-cjk fonts-ipafont-gothic fonts-ipafont-mincho \
                    fonts-noto-color-emoji

# サンプル: uploads/売上.xlsx を用意してから
libreoffice --headless --convert-to pdf --outdir ./out ./uploads/売上.xlsx
# → ./out/売上.pdf ができればOK


# app.py
# app.py
from flask import Flask, render_template_string, send_file, abort
import subprocess, tempfile, shutil
from pathlib import Path

app = Flask(__name__)
UPLOAD_DIR = Path("uploads")      # Excel置き場
CACHE_DIR  = Path("out")          # 生成PDF置き場
CACHE_DIR.mkdir(exist_ok=True)

def convert_xlsx_to_pdf(xls_path: Path, pdf_path: Path):
    if not xls_path.exists():
        abort(404, "Excelが見つかりません")
    # 既にPDFがあり新しければ再変換しない
    if pdf_path.exists() and pdf_path.stat().st_mtime >= xls_path.stat().st_mtime:
        return
    # リクエストごとに一時プロファイル→並列変換のロック回避
    tmp_profile = Path(tempfile.mkdtemp(prefix="lo-profile-"))
    try:
        cmd = [
            "libreoffice", "--headless",
            f"-env:UserInstallation=file://{tmp_profile.as_posix()}",
            "--convert-to", "pdf:calc_pdf_Export",
            "--outdir", str(CACHE_DIR), str(xls_path),
        ]
        subprocess.run(cmd, check=True, timeout=180)
        if not pdf_path.exists():
            abort(500, "PDF生成に失敗しました")
    finally:
        shutil.rmtree(tmp_profile, ignore_errors=True)

# ① PDFそのものを返す（iframeの中身）
@app.route("/excel-pdf/<path:filename>")
def excel_pdf(filename):
    xls = UPLOAD_DIR / filename
    pdf = CACHE_DIR / (Path(filename).stem + ".pdf")
    convert_xlsx_to_pdf(xls, pdf)
    # as_attachment=False で「ダウンロードではなく閲覧（inline）」を指示
    return send_file(
        pdf,
        mimetype="application/pdf",
        as_attachment=False,
        download_name=pdf.name,  # 表示名
        max_age=0,               # 必要に応じてキャッシュ調整
        conditional=True,
        etag=True,
        last_modified=pdf.stat().st_mtime
    )

# ② 表示用ページ（ここをユーザーに見せる）
PAGE = """
<!doctype html><meta charset="utf-8">
<title>{{ title }}</title>
<style>body{margin:0} .v{width:100vw;height:100vh;border:0}</style>
<iframe class="v" src="{{ src }}" allowfullscreen></iframe>
"""
@app.route("/view/<path:filename>")
def view_excel(filename):
    return render_template_string(
        PAGE,
        title=f"{filename} の表示",
        src=f"/excel-pdf/{filename}"
    )

if __name__ == "__main__":
    app.run(debug=True)


# 既存の import 群に追加
from flask import url_for

# 一覧ページのテンプレ（/）
INDEX_HTML = """
<!doctype html><meta charset="utf-8">
<title>Excel 一覧</title>
<style>
  body{font-family:system-ui;margin:24px}
  h1{font-size:20px;margin:0 0 12px}
  ul{padding-left:18px}
  li{margin:4px 0}
  .empty{color:#666}
  code{background:#f5f5f5;padding:2px 6px;border-radius:4px}
</style>
<h1>Excel 一覧（{{ files|length }} 件）</h1>
{% if files %}
  <ul>
  {% for f in files %}
    <li>
      <a href="{{ url_for('view_excel', filename=f) }}">{{ f }}</a>
      <small>（PDF表示）</small>
    </li>
  {% endfor %}
  </ul>
{% else %}
  <p class="empty">uploads/ に .xlsx / .xlsm / .xls を置くと一覧に出ます。</p>
{% endif %}
<p>直接アクセス例：<code>/view/売上.xlsx</code> や <code>/excel-pdf/売上.xlsx</code></p>
"""

def _iter_excels():
    """uploads/ 配下の Excel を相対パス（POSIX）で列挙"""
    exts = {".xlsx", ".xlsm", ".xls"}
    if not UPLOAD_DIR.exists():
        return []
    files = []
    for p in UPLOAD_DIR.rglob("*"):
        if p.is_file() and p.suffix.lower() in exts:
            files.append(p.relative_to(UPLOAD_DIR).as_posix())
    return sorted(files)

@app.route("/")
def index():
    files = _iter_excels()
    return render_template_string(INDEX_HTML, files=files)

