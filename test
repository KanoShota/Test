# cf_cookie_min_bare.py
# pip install botocore cryptography
import json, datetime as dt
from flask import Blueprint, make_response, jsonify
from botocore.signers import CloudFrontSigner
from cryptography.hazmat.primitives import serialization

bp = Blueprint("cf_cookie", __name__)

# ==== べた書き設定（あなたの値に置換） ======================================
CF_KEY_PAIR_ID = "K3CEXAMPLE123456"
CF_DOMAIN      = "video.c2-connect-dev.com"
COOKIE_DOMAIN  = ".c2-connect-dev.com"
TTL_SEC        = 600
RESOURCE_PATH  = "/protected/*"      # CloudFront の Behavior と一致させる
SAMESITE       = "Lax"               # クロスサイトなら "None"
SECURE_COOKIE  = True

CF_PRIVATE_KEY_PEM = b"""-----BEGIN PRIVATE KEY-----
...あなたの秘密鍵PEM...
-----END PRIVATE KEY-----"""
# ===========================================================================

def _rsa_signer(message: bytes) -> bytes:
    key = serialization.load_pem_private_key(CF_PRIVATE_KEY_PEM, password=None)
    return key.sign(message)

def _signed_cookie_pair(ttl_sec: int = 600) -> dict:
    """CloudFront 署名付きCookie(3つ)を作って返すヘルパー"""
    expire_epoch = int((dt.datetime.utcnow() + dt.timedelta(seconds=ttl_sec)).timestamp())
    policy = {
        "Statement": [{
            "Resource": f"https://{CF_DOMAIN}{RESOURCE_PATH}",
            "Condition": {"DateLessThan": {"AWS:EpochTime": expire_epoch}}
        }]
    }
    signer = CloudFrontSigner(CF_KEY_PAIR_ID, _rsa_signer)
    return signer.generate_signed_cookie(url=None, policy=json.dumps(policy).encode("utf-8"))

# ---------------- 署名Cookieの発行（ループ無し・べた書き） -------------------
@bp.route("/auth/cf-cookie/issue", methods=["POST", "GET"])
def issue():
    # 認証チェックはあなたの実装に置き換え
    cookies = _signed_cookie_pair(600)  # TTL=600秒(10分) 固定

    resp = make_response(jsonify({"ok": True, "ttlSec": 600}))
    # べた書き（共通属性も値を直書き）
    resp.set_cookie(
        "CloudFront-Policy",
        cookies["CloudFront-Policy"],
        max_age=600, secure=True, httponly=True,
        samesite="Lax", domain=".c2-connect-dev.com", path="/",
    )
    resp.set_cookie(
        "CloudFront-Signature",
        cookies["CloudFront-Signature"],
        max_age=600, secure=True, httponly=True,
        samesite="Lax", domain=".c2-connect-dev.com", path="/",
    )
    resp.set_cookie(
        "CloudFront-Key-Pair-Id",
        cookies["CloudFront-Key-Pair-Id"],
        max_age=600, secure=True, httponly=True,
        samesite="Lax", domain=".c2-connect-dev.com", path="/",
    )
    return resp

# ---------------- 署名Cookieの削除（ループ無し・べた書き） -------------------
@bp.route("/auth/cf-cookie/clear", methods=["POST", "GET"])
def clear():
    resp = make_response(jsonify({"ok": True}))

    # 発行時と同じ domain/path で確実に削除（重要）
    resp.delete_cookie("CloudFront-Policy",      domain=".c2-connect-dev.com", path="/")
    resp.delete_cookie("CloudFront-Signature",   domain=".c2-connect-dev.com", path="/")
    resp.delete_cookie("CloudFront-Key-Pair-Id", domain=".c2-connect-dev.com", path="/")

    # もし過去に domain を付けず発行していた可能性があるなら、念のためこれも（任意）
    # resp.delete_cookie("CloudFront-Policy", path="/")
    # resp.delete_cookie("CloudFront-Signature", path="/")
    # resp.delete_cookie("CloudFront-Key-Pair-Id", path="/")

    # もし video サブドメインで直接発行していた場合も（任意）
    # resp.delete_cookie("CloudFront-Policy",      domain="video.c2-connect-dev.com", path="/")
    # resp.delete_cookie("CloudFront-Signature",   domain="video.c2-connect-dev.com", path="/")
    # resp.delete_cookie("CloudFront-Key-Pair-Id", domain="video.c2-connect-dev.com", path="/")

    return resp
